// Fixed version of telegramBot.ts - resolved command handler issues
import { Telegraf, Context, session } from 'telegraf';
import { ethers } from 'ethers';
import { 
  getUserByTelegramUsername, 
  storeUserProfile, 
  getUserWallets, 
  createWallet, 
  setWalletAsPrimary,
  getWalletById,
  deleteWallet,
  type UserProfile,
  type UserWallet 
} from './supabaseClient';
import { generateTransactionRequest, getTokenBalance } from './transactionSender';
import { getSwapQuote, generateSwapLink } from './uniswap';
import { estimateGasCost } from './transactionTracker';
import { XMTPAgent } from './xmtpAgent';
import { generateWallet } from './utils/generate-wallet';
import dotenv from 'dotenv';

dotenv.config();

if (!process.env.TELEGRAM_BOT_TOKEN) {
  throw new Error('TELEGRAM_BOT_TOKEN is required');
}

const provider = new ethers.JsonRpcProvider(process.env.BASE_RPC_URL);

// Custom session type
interface BotSession {
  sensitiveMessageId?: number;
}

// Extend context type to include session
interface BotContext extends Context {
  session: BotSession;
}

// Bot setup
const bot = new Telegraf<BotContext>(process.env.TELEGRAM_BOT_TOKEN);
const xmtpAgent = new XMTPAgent();

// Define the main menu keyboard
const mainMenuKeyboard = {
  reply_markup: {
    remove_keyboard: true as const
  }
};

// Configure session support
bot.use(session({
  defaultSession: () => ({ sensitiveMessageId: undefined })
}));

// Enable debug logging
bot.use(async (ctx, next) => {
  const start = Date.now();
  const messageType = ctx.updateType || 'unknown';
  
  // Safely get message text from different types of messages
  let messageText = 'no text';
  if (ctx.message && 'text' in ctx.message) {
    messageText = ctx.message.text;
  } else if (ctx.callbackQuery && 'data' in ctx.callbackQuery) {
    messageText = `callback: ${ctx.callbackQuery.data}`;
  }
  
  console.log(`Received [${messageType}]: ${messageText}`);
  
  try {
    await next();
    const ms = Date.now() - start;
    console.log(`Response time: ${ms}ms for [${messageType}]: ${messageText}`);
  } catch (error) {
    console.error(`Error processing [${messageType}]: ${messageText}`, error);
    throw error;
  }
});

// Session middleware
bot.use(async (ctx, next) => {
  ctx.session = ctx.session || {};
  await next();
});

// Global error handler
bot.catch(async (err: unknown, ctx: Context) => {
  console.error('Bot error:', err);
  try {
    await ctx.reply('An error occurred while processing your request.');
  } catch (replyError) {
    console.error('Failed to send error message:', replyError);
  }
});

// Command handler function
const handleCommand = async (ctx: BotContext, commandHandler: () => Promise<any>) => {
  try {
    // Log which command is being executed
    let commandText = 'unknown command';
    if (ctx.message && 'text' in ctx.message) {
      commandText = ctx.message.text;
    }
    console.log(`Executing command handler for: ${commandText}`);
    return await commandHandler();
  } catch (error) {
    console.error('Command error:', error);
    await ctx.reply('An error occurred while processing your request. Please try again.');
    return null;
  }
};

// Helper function to validate and get user profile
const validateUser = async (username: string): Promise<{ user: UserProfile; error?: undefined } | { user?: undefined; error: string }> => {
  try {
    const user = await getUserByTelegramUsername(username);
    if (!user) {
      return { error: 'Please use /start to create your account first.' };
    }
    return { user };
  } catch (error) {
    console.error('Error validating user:', error);
    return { error: 'Error validating user profile. Please try again.' };
  }
};

// COMMAND HANDLERS
// ---------------

// Command: /start
bot.command('start', async (ctx) => {
  try {
    console.log('Start command received directly');
    const telegramId = ctx.from?.id.toString();
    const username = ctx.from?.username;
    
    if (!telegramId || !username) {
      return ctx.reply('Error: Could not identify user');
    }

    // Create or validate user profile
    const userProfile: UserProfile = {
      telegram_id: telegramId,
      telegram_username: username,
      created_at: new Date(),
      updated_at: new Date()
    };

    // Check existing wallets
    const userWallets: UserWallet[] = await getUserWallets(telegramId);
    
    // For existing users with wallets
    if (userWallets.length > 0) {
      return ctx.reply(
        `Welcome back to BaseBuddy! üöÄ\n\n` +
        `You already have ${userWallets.length} wallet${userWallets.length > 1 ? 's' : ''}. ` +
        `Use /wallets to manage them or /newwallet to create another one.`,
        mainMenuKeyboard
      );
    }
    
    // For new users
    await storeUserProfile(userProfile);

    await ctx.reply(
      `<b>Welcome to BaseBuddy! üöÄ</b>\n\n` +
      `I'll help you create your first wallet on Base chain.\n\n` +
      `‚ö†Ô∏è <b>IMPORTANT:</b> In the next message, I will show you your:\n` +
      `‚Ä¢ Wallet Address\n` +
      `‚Ä¢ Private Key\n` +
      `‚Ä¢ Backup Phrase\n\n` +
      `You MUST save these somewhere safe and never share them with anyone!\n\n` +
      `Ready? Let's create your wallet!`,
      { parse_mode: 'HTML' }
    );

    const wallet = generateWallet();
    
    const storedWallet = await createWallet({
      telegram_id: telegramId,
      address: wallet.address,
      name: 'Primary Wallet',
      is_primary: true
    });

    if (!storedWallet) {
      await ctx.reply('‚ùå Error creating wallet. Please try again.');
      return;
    }

    if (ctx.chat?.type !== 'private') {
      await ctx.reply('üîê I\'ve sent your new wallet details in a private message. Click "Start" to view them.');
      return;
    }

    const sensitiveInfo = await ctx.reply(
      `<b>üîê Your New Wallet Is Ready!</b>\n\n` +
      `<b>Wallet Address:</b>\n` +
      `<code>${wallet.address}</code>\n\n` +
      `<b>Private Key:</b>\n` +
      `<code>${wallet.privateKey}</code>\n\n` +
      `<b>Backup Phrase:</b>\n` +
      `<code>${wallet.mnemonic}</code>\n\n` +
      `‚ö†Ô∏è <b>WARNING:</b> This message will self-destruct once you confirm saving these details.\n` +
      `Copy and store this information securely NOW!`,
      {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [[
            { text: "‚úÖ I've Safely Saved My Wallet Details", callback_data: 'confirm_wallet_save' }
          ]]
        }
      }
    );

    ctx.session.sensitiveMessageId = sensitiveInfo.message_id;
  } catch (error) {
    console.error('Start command error:', error);
    await ctx.reply('An error occurred while processing your start request.');
  }
});

// Command: /portfolio
bot.command('portfolio', async (ctx) => {
  try {
    console.log('Portfolio command received directly');
    const username = ctx.from?.username;
    const chatType = ctx.chat?.type;

    if (!username) {
      return ctx.reply('Error: Could not identify user');
    }
    
    // In groups, redirect to DM
    if (chatType !== 'private') {
      const options = ctx.message?.message_thread_id 
        ? { message_thread_id: ctx.message.message_thread_id }
        : undefined;
      return ctx.reply(
        `@${username}, for privacy reasons, please check your portfolio in our private chat.`,
        options
      );
    }

    const user = await getUserByTelegramUsername(username);
    if (!user) {
      return ctx.reply('Please use /start to create your account first.');
    }

    // Get user's primary wallet
    const wallets: UserWallet[] = await getUserWallets(user.telegram_id);
    const primaryWallet: UserWallet | undefined = wallets.find(w => w.is_primary);
    if (!primaryWallet) {
      return ctx.reply(
        'You have no primary wallet set. Use /wallets to manage your wallets or /start to create one.'
      );
    }

    try {
      const ethBalance = await getTokenBalance(primaryWallet.address);
      const portfolioMessage = `
<b>üíº Your Base Portfolio</b>

<code>
ETH Balance:  ${ethBalance} ETH
‚âà $${(parseFloat(ethBalance) * 2000).toFixed(2)} USD
</code>

<i>üí´ More tokens coming soon!</i>

<b>üîç Quick Actions:</b>
‚Ä¢ Send ETH
‚Ä¢ Swap tokens
‚Ä¢ Check gas prices
`;

      await ctx.reply(portfolioMessage, {
        parse_mode: 'HTML',
        ...mainMenuKeyboard
      });
    } catch (error) {
      console.error('Error fetching portfolio:', error);
      await ctx.reply(
        '‚ùå Error fetching your portfolio. Please try again later.\n' +
        'If the problem persists, check your wallet connection.'
      );
    }
  } catch (error) {
    console.error('Portfolio command error:', error);
    await ctx.reply('An error occurred while processing your portfolio request.');
  }
});

// Command: /wallets
bot.command('wallets', async (ctx) => {
  try {
    console.log('Wallets command received directly');
    const username = ctx.from?.username;
    const chatType = ctx.chat?.type;

    if (!username) {
      return ctx.reply('Error: Could not identify user');
    }
    
    // In groups, redirect to DM
    if (chatType !== 'private') {
      const options = ctx.message?.message_thread_id 
        ? { message_thread_id: ctx.message.message_thread_id }
        : undefined;
      return ctx.reply(
        `@${username}, for privacy reasons, please manage your wallets in our private chat.`,
        options
      );
    }

    const user = await getUserByTelegramUsername(username);
    if (!user) {
      return ctx.reply('Please use /start to create your account first.');
    }

    const wallets = await getUserWallets(user.telegram_id);
    if (!wallets.length) {
      return ctx.reply(
        '‚ùå You have no wallets yet.\n\n' +
        'Use /start to create your first wallet!'
      );
    }    // Generate wallet list with copy buttons
    const inlineKeyboard = [];
    const walletsList = wallets.map((wallet, index) => {
      const name = wallet.name || `Wallet ${index + 1}`;
      const isPrimary = wallet.is_primary ? ' (Primary)' : '';
      const shortAddress = `${wallet.address.slice(0, 6)}...${wallet.address.slice(-4)}`;
      
      // Add copy button for each wallet
      inlineKeyboard.push([
        { text: `üìã Copy ${name} Address`, callback_data: `copy_${wallet.id}` }
      ]);
      
      return `${index + 1}. ${name}${isPrimary}\n   ${shortAddress}`;
    }).join('\n\n');    // Add wallet management buttons
    inlineKeyboard.push(
      [
        { text: '‚ûï New Wallet', callback_data: 'new_wallet' },
        { text: 'üîÑ Set Primary', callback_data: 'set_primary' }
      ],
      [
        { text: '‚úèÔ∏è Rename', callback_data: 'rename_wallet' },
        { text: 'üóëÔ∏è Delete', callback_data: 'delete_wallet' }
      ]
    );

    await ctx.reply(
      `<b>üè¶ Your Wallets</b>\n\n` +
      `${walletsList}\n\n` +
      `<i>Select an action:</i>`,
      {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: inlineKeyboard
        }
      }
    );
  } catch (error) {
    console.error('Wallets command error:', error);
    await ctx.reply('An error occurred while processing your wallets request.');
  }
});

// Command: /send
bot.command('send', async (ctx) => {
  try {
    console.log('Send command received directly');
    await ctx.reply(
      '<b>üí∏ How to Send ETH</b>\n\n' +
      'Use this format:\n' +
      '<code>send [amount] ETH to @username</code>\n\n' +
      'For example:\n' +
      '<code>send 0.1 ETH to @john</code>\n\n' +
      'üí° Tips:\n' +
      '‚Ä¢ Make sure you have enough ETH for gas\n' +
      '‚Ä¢ Double-check the recipient username\n' +
      '‚Ä¢ Verify transaction details before signing',
      { parse_mode: 'HTML' }
    );
  } catch (error) {
    console.error('Send command error:', error);
    await ctx.reply('An error occurred while processing your send request.');
  }
});

// Command: /swap
bot.command('swap', async (ctx) => {
  try {
    console.log('Swap command received directly');
    await ctx.reply(
      '<b>üîÑ How to Swap Tokens</b>\n\n' +
      'Use this format:\n' +
      '<code>buy [amount] [token] with [amount] ETH</code>\n\n' +
      'For example:\n' +
      '<code>buy 50 USDC with 0.05 ETH</code>\n\n' +
      'üí° Tips:\n' +
      '‚Ä¢ Check token prices before swapping\n' +
      '‚Ä¢ Watch for slippage on large trades\n' +
      '‚Ä¢ Consider gas fees in your calculations',
      { parse_mode: 'HTML' }
    );
  } catch (error) {
    console.error('Swap command error:', error);
    await ctx.reply('An error occurred while processing your swap request.');
  }
});

// Command: /gas
bot.command('gas', async (ctx) => {
  try {
    console.log('Gas command received directly');
    try {
      const feeData = await provider.getFeeData();
      const maxFeePerGas = feeData.maxFeePerGas || feeData.gasPrice;
      
      if (!maxFeePerGas) {
        throw new Error('Could not get gas price');
      }

      const gasMessage = `
<b>‚õΩÔ∏è Current Base Gas Prices</b>

<code>
Max Fee:     ${ethers.formatUnits(maxFeePerGas, 'gwei')} Gwei
Priority:    ${feeData.maxPriorityFeePerGas ? ethers.formatUnits(feeData.maxPriorityFeePerGas, 'gwei') : 'N/A'} Gwei
</code>

<i>üí° Gas prices on Base are typically very low!</i>

Estimated costs:
‚Ä¢ ETH Transfer: ~0.0001 ETH
‚Ä¢ Token Swap: ~0.0003 ETH
`;

      await ctx.reply(gasMessage, { parse_mode: 'HTML' });
    } catch (error) {
      console.error('Error fetching gas prices:', error);
      await ctx.reply(
        '‚ùå Error fetching gas prices. Please try again later.\n' +
        'If the problem persists, there may be network issues.'
      );
    }
  } catch (error) {
    console.error('Gas command error:', error);
    await ctx.reply('An error occurred while processing your gas price request.');
  }
});

// Command: /newwallet
bot.command('newwallet', async (ctx) => {
  try {
    console.log('New wallet command received directly');
    const username = ctx.from?.username;
    const chatType = ctx.chat?.type;

    if (!username) {
      return ctx.reply('Error: Could not identify user');
    }
    
    if (chatType !== 'private') {
      const options = ctx.message?.message_thread_id 
        ? { message_thread_id: ctx.message.message_thread_id }
        : undefined;
      return ctx.reply(
        `@${username}, for security reasons, please create wallets in our private chat.`,
        options
      );
    }

    const user = await getUserByTelegramUsername(username);
    if (!user) {
      return ctx.reply('Please use /start to create your account first.');
    }

    const wallets = await getUserWallets(user.telegram_id);
    if (wallets.length >= 5) {
      return ctx.reply(
        '‚ùå Maximum wallet limit reached (5).\n\n' +
        'Use /wallets to manage your existing wallets.'
      );
    }

    const wallet = generateWallet();
    const walletNumber = wallets.length + 1;
    
    const storedWallet = await createWallet({
      telegram_id: user.telegram_id,
      address: wallet.address,
      name: `Wallet ${walletNumber}`,
      is_primary: false
    });

    if (!storedWallet) {
      return ctx.reply('‚ùå Error creating wallet. Please try again.');
    }

    const sensitiveInfo = await ctx.reply(
      `<b>üîê Your New Wallet Is Ready!</b>\n\n` +
      `<b>Wallet Address:</b>\n` +
      `<code>${wallet.address}</code>\n\n` +
      `<b>Private Key:</b>\n` +
      `<code>${wallet.privateKey}</code>\n\n` +
      `<b>Backup Phrase:</b>\n` +
      `<code>${wallet.mnemonic}</code>\n\n` +
      `‚ö†Ô∏è <b>WARNING:</b> This message will self-destruct once you confirm saving these details.\n` +
      `Copy and store this information securely NOW!`,
      {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [[
            { text: "‚úÖ I've Safely Saved My Wallet Details", callback_data: 'confirm_wallet_save' }
          ]]
        }
      }
    );

    ctx.session.sensitiveMessageId = sensitiveInfo.message_id;
  } catch (error) {
    console.error('New wallet command error:', error);
    await ctx.reply('An error occurred while creating a new wallet.');
  }
});

// Command: /help
bot.command('help', async (ctx) => {
  try {
    console.log('Help command received directly');
    await ctx.reply(
      `<b>ü§ñ BaseBuddy Help Guide</b>\n\n` +
      `<b>Available Commands:</b>\n\n` +
      `/start - Create your first wallet\n` +
      `/portfolio - View your wallet balances\n` +
      `/wallets - Manage your wallets\n` +
      `/newwallet - Create additional wallet\n` +
      `/send - Send ETH to others\n` +
      `/swap - Swap tokens on Base\n` +
      `/gas - Check current gas prices\n` +
      `/help - Show this help message\n\n` +
      `<b>Quick Commands:</b>\n` +
      `‚Ä¢ <code>send 0.1 ETH to @user</code>\n` +
      `‚Ä¢ <code>buy 50 USDC with 0.1 ETH</code>\n\n` +
      `<b>Need More Help?</b>\n` +
      `‚Ä¢ Use each command to see detailed instructions\n` +
      `‚Ä¢ Keep your wallet details safe\n` +
      `‚Ä¢ Never share your private keys\n\n` +
      `<i>üîê For security, use private chat for sensitive operations</i>`,
      { 
        parse_mode: 'HTML',
        ...mainMenuKeyboard
      }
    );
  } catch (error) {
    console.error('Help command error:', error);
    await ctx.reply('An error occurred while processing your help request.');
  }
});

// KEYBOARD BUTTONS
// ---------------

// Handle keyboard button for Portfolio
bot.hears('üíº My Portfolio', async (ctx) => {
  // Reuse the portfolio command handler
  await ctx.reply('Showing portfolio information...');
  return bot.handleUpdate({
    update_id: 0,
    message: {
      message_id: 0,
      date: Math.floor(Date.now() / 1000),
      chat: ctx.chat,
      from: ctx.from,
      text: '/portfolio'
    }
  });
});

// Handle keyboard button for Wallets
bot.hears('üè¶ My Wallets', async (ctx) => {
  await ctx.reply('Showing your wallets...');
  return bot.handleUpdate({
    update_id: 0,
    message: {
      message_id: 0,
      date: Math.floor(Date.now() / 1000),
      chat: ctx.chat,
      from: ctx.from,
      text: '/wallets'
    }
  });
});

// Handle keyboard button for Send ETH
bot.hears('üí∏ Send ETH', async (ctx) => {
  await ctx.reply('How to send ETH...');
  return bot.handleUpdate({
    update_id: 0,
    message: {
      message_id: 0,
      date: Math.floor(Date.now() / 1000),
      chat: ctx.chat,
      from: ctx.from,
      text: '/send'
    }
  });
});

// Handle keyboard button for Swap Tokens
bot.hears('üîÑ Swap Tokens', async (ctx) => {
  await ctx.reply('How to swap tokens...');
  return bot.handleUpdate({
    update_id: 0,
    message: {
      message_id: 0,
      date: Math.floor(Date.now() / 1000),
      chat: ctx.chat,
      from: ctx.from,
      text: '/swap'
    }
  });
});

// Handle keyboard button for Gas Prices
bot.hears('üìä Gas Prices', async (ctx) => {
  await ctx.reply('Checking gas prices...');
  return bot.handleUpdate({
    update_id: 0,
    message: {
      message_id: 0,
      date: Math.floor(Date.now() / 1000),
      chat: ctx.chat,
      from: ctx.from,
      text: '/gas'
    }
  });
});

// Handle keyboard button for New Wallet
bot.hears('‚ûï New Wallet', async (ctx) => {
  await ctx.reply('Creating a new wallet...');
  return bot.handleUpdate({
    update_id: 0,
    message: {
      message_id: 0,
      date: Math.floor(Date.now() / 1000),
      chat: ctx.chat,
      from: ctx.from,
      text: '/newwallet'
    }
  });
});

// Handle keyboard button for Help
bot.hears('‚ùì Help', async (ctx) => {
  await ctx.reply('Showing help information...');
  return bot.handleUpdate({
    update_id: 0,
    message: {
      message_id: 0,
      date: Math.floor(Date.now() / 1000),
      chat: ctx.chat,
      from: ctx.from,
      text: '/help'
    }
  });
});

// Handle wallet action callbacks
bot.action('confirm_wallet_save', async (ctx) => {
  try {
    if (ctx.session.sensitiveMessageId) {
      try {
        await ctx.deleteMessage(ctx.session.sensitiveMessageId);
        delete ctx.session.sensitiveMessageId;
        
        await ctx.reply(
          '‚úÖ Great! I\'ve deleted the sensitive information.\n\n' +
          'Make sure you have stored your wallet details in a safe place!\n\n' +
          'Use /wallets to manage your wallets or view your /portfolio.',
          mainMenuKeyboard
        );
      } catch (error) {
        console.error('Error deleting sensitive message:', error);
        await ctx.reply('‚ùå Could not delete the message. Please delete it manually.');
      }
    }
    await ctx.answerCbQuery();
  } catch (error) {
    console.error('Error handling wallet save confirmation:', error);
    await ctx.answerCbQuery('An error occurred. Please try again.');
  }
});

// Handle copy address callback
bot.action(/^copy_(.+)$/, async (ctx) => {
  try {
    const walletId = ctx.match[1];
    const wallet = await getWalletById(walletId);
    
    if (!wallet) {
      await ctx.answerCbQuery('Wallet not found');
      return;
    }

    await ctx.reply(
      `<b>üìã Wallet Address</b>\n\n` +
      `<code>${wallet.address}</code>`,
      { parse_mode: 'HTML' }
    );
    await ctx.answerCbQuery('Address copied to message');
  } catch (error) {
    console.error('Error handling copy address:', error);
    await ctx.answerCbQuery('Error copying address');
  }
});

// Handle set primary wallet callback
bot.action('set_primary', async (ctx) => {
  try {
    const username = ctx.from?.username;
    if (!username) {
      await ctx.answerCbQuery('Could not identify user');
      return;
    }

    const user = await getUserByTelegramUsername(username);
    if (!user) {
      await ctx.answerCbQuery('User profile not found');
      return;
    }

    const wallets = await getUserWallets(user.telegram_id);
    const inlineKeyboard = wallets.map(wallet => [{
      text: `${wallet.name || 'Unnamed Wallet'} (${wallet.address.slice(0, 6)}...${wallet.address.slice(-4)})`,
      callback_data: `primary_${wallet.id}`
    }]);

    await ctx.reply(
      '<b>üîÑ Select Primary Wallet</b>\n\n' +
      'Choose which wallet to set as primary:',
      {
        parse_mode: 'HTML',
        reply_markup: { inline_keyboard: inlineKeyboard }
      }
    );
    await ctx.answerCbQuery();
  } catch (error) {
    console.error('Error showing primary wallet selection:', error);
    await ctx.answerCbQuery('Error showing wallet selection');
  }
});

// Handle primary wallet selection
bot.action(/^primary_(.+)$/, async (ctx) => {
  try {
    const walletId = ctx.match[1];
    const username = ctx.from?.username;
    
    if (!username) {
      await ctx.answerCbQuery('Could not identify user');
      return;
    }

    const user = await getUserByTelegramUsername(username);
    if (!user) {
      await ctx.answerCbQuery('User profile not found');
      return;
    }

    const success = await setWalletAsPrimary(user.telegram_id, walletId);
    if (success) {
      await ctx.reply('‚úÖ Primary wallet updated successfully');
      // Refresh the wallet list
      await walletsCommandHandler(ctx);
    } else {
      await ctx.reply('‚ùå Failed to update primary wallet');
    }
    await ctx.answerCbQuery();
  } catch (error) {
    console.error('Error setting primary wallet:', error);
    await ctx.answerCbQuery('Error setting primary wallet');
  }
});

// Handle rename wallet callback
bot.action('rename_wallet', async (ctx) => {
  try {
    const username = ctx.from?.username;
    if (!username) {
      await ctx.answerCbQuery('Could not identify user');
      return;
    }

    const user = await getUserByTelegramUsername(username);
    if (!user) {
      await ctx.answerCbQuery('User profile not found');
      return;
    }

    const wallets = await getUserWallets(user.telegram_id);
    const inlineKeyboard = wallets.map(wallet => [{
      text: `${wallet.name || 'Unnamed Wallet'} (${wallet.address.slice(0, 6)}...${wallet.address.slice(-4)})`,
      callback_data: `rename_select_${wallet.id}`
    }]);

    await ctx.reply(
      '<b>‚úèÔ∏è Rename Wallet</b>\n\n' +
      'Choose which wallet to rename:',
      {
        parse_mode: 'HTML',
        reply_markup: { inline_keyboard: inlineKeyboard }
      }
    );
    await ctx.answerCbQuery();
  } catch (error) {
    console.error('Error showing rename wallet selection:', error);
    await ctx.answerCbQuery('Error showing wallet selection');
  }
});

// Handle rename wallet selection
bot.action(/^rename_select_(.+)$/, async (ctx) => {
  try {
    const walletId = ctx.match[1];
    const wallet = await getWalletById(walletId);
    
    if (!wallet) {
      await ctx.answerCbQuery('Wallet not found');
      return;
    }

    ctx.session.renameWalletId = walletId;
    
    await ctx.reply(
      `<b>‚úèÔ∏è Rename Wallet</b>\n\n` +
      `Current name: ${wallet.name || 'Unnamed Wallet'}\n` +
      `Address: ${wallet.address.slice(0, 6)}...${wallet.address.slice(-4)}\n\n` +
      `Reply with the new name for this wallet:`,
      { parse_mode: 'HTML' }
    );
    await ctx.answerCbQuery();
  } catch (error) {
    console.error('Error handling rename wallet selection:', error);
    await ctx.answerCbQuery('Error selecting wallet to rename');
  }
});

// Handle delete wallet callback
bot.action('delete_wallet', async (ctx) => {
  try {
    const username = ctx.from?.username;
    if (!username) {
      await ctx.answerCbQuery('Could not identify user');
      return;
    }

    const user = await getUserByTelegramUsername(username);
    if (!user) {
      await ctx.answerCbQuery('User profile not found');
      return;
    }

    const wallets = await getUserWallets(user.telegram_id);
    const inlineKeyboard = wallets.map(wallet => [{
      text: `${wallet.name || 'Unnamed Wallet'} (${wallet.address.slice(0, 6)}...${wallet.address.slice(-4)})`,
      callback_data: `delete_${wallet.id}`
    }]);

    await ctx.reply(
      '<b>üóëÔ∏è Delete Wallet</b>\n\n' +
      'Choose which wallet to delete:',
      {
        parse_mode: 'HTML',
        reply_markup: { inline_keyboard: inlineKeyboard }
      }
    );
    await ctx.answerCbQuery();
  } catch (error) {
    console.error('Error showing delete wallet selection:', error);
    await ctx.answerCbQuery('Error showing wallet selection');
  }
});

// Handle delete wallet selection
bot.action(/^delete_(.+)$/, async (ctx) => {
  try {
    const walletId = ctx.match[1];
    const wallet = await getWalletById(walletId);
    
    if (!wallet) {
      await ctx.answerCbQuery('Wallet not found');
      return;
    }

    await ctx.reply(
      `<b>üóëÔ∏è Confirm Delete Wallet</b>\n\n` +
      `Are you sure you want to delete this wallet?\n\n` +
      `Name: ${wallet.name || 'Unnamed Wallet'}\n` +
      `Address: ${wallet.address.slice(0, 6)}...${wallet.address.slice(-4)}`,
      {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [[
            { text: '‚ùå Cancel', callback_data: 'delete_cancel' },
            { text: '‚úÖ Confirm Delete', callback_data: `delete_confirm_${walletId}` }
          ]]
        }
      }
    );
    await ctx.answerCbQuery();
  } catch (error) {
    console.error('Error handling delete wallet selection:', error);
    await ctx.answerCbQuery('Error selecting wallet to delete');
  }
});

// Handle delete wallet confirmation
bot.action(/^delete_confirm_(.+)$/, async (ctx) => {
  try {
    const walletId = ctx.match[1];
    const success = await deleteWallet(walletId);
    
    if (success) {
      await ctx.reply('‚úÖ Wallet deleted successfully');
      // Refresh the wallet list
      await walletsCommandHandler(ctx);
    } else {
      await ctx.reply('‚ùå Failed to delete wallet');
    }
    await ctx.answerCbQuery();
  } catch (error) {
    console.error('Error deleting wallet:', error);
    await ctx.answerCbQuery('Error deleting wallet');
  }
});

// Handle delete wallet cancellation
bot.action('delete_cancel', async (ctx) => {
  try {
    await ctx.reply('‚ùå Wallet deletion cancelled');
    await ctx.answerCbQuery();
  } catch (error) {
    console.error('Error handling delete cancellation:', error);
    await ctx.answerCbQuery('Error cancelling deletion');
  }
});

// Handle wallet rename messages
bot.on('text', async (ctx) => {
  // Only process messages in private chats when in rename mode
  if (ctx.chat?.type !== 'private' || !ctx.session.renameWalletId) {
    return;
  }

  try {
    const newName = ctx.message.text.trim();
    
    // Basic validation
    if (newName.length < 1 || newName.length > 50) {
      await ctx.reply('‚ùå Wallet name must be between 1 and 50 characters');
      return;
    }

    const success = await updateWalletName(ctx.session.renameWalletId, newName);
    
    if (success) {
      await ctx.reply('‚úÖ Wallet renamed successfully');
      // Clear the rename state
      delete ctx.session.renameWalletId;
      // Refresh the wallet list
      await walletsCommandHandler(ctx);
    } else {
      await ctx.reply('‚ùå Failed to rename wallet');
    }
  } catch (error) {
    console.error('Error handling wallet rename:', error);
    await ctx.reply('An error occurred while renaming the wallet');
  }
});

// Bot setup function
const setupBot = async () => {
  try {
    await bot.telegram.setMyDescription(
      'BaseBuddy - Your DeFi companion on Base chain! Send ETH, swap tokens, and track your portfolio easily.'
    );
    
    await bot.telegram.setMyCommands([
      { command: 'start', description: 'Start the bot and create your first wallet' },
      { command: 'portfolio', description: 'View your portfolio' },
      { command: 'wallets', description: 'Manage your wallets' },
      { command: 'newwallet', description: 'Create an additional wallet' },
      { command: 'send', description: 'Send ETH to others' },
      { command: 'swap', description: 'Swap tokens on Base' },
      { command: 'gas', description: 'Check current gas prices' },
      { command: 'help', description: 'Get help with commands' }
    ]);
    
    await bot.telegram.setMyShortDescription(
      'üöÄ Easy crypto transactions on Base chain'
    );
    
    console.log('Bot metadata configured successfully');
  } catch (error) {
    console.error('Error setting up bot metadata:', error);
  }
};

// Start bot function
const startBot = async () => {
  try {
    console.log('Setting up bot metadata...');
    // Setup bot metadata first
    await setupBot();
    
    console.log('Starting bot launch sequence...');
    // Launch the bot
    await bot.launch();
    console.log('üöÄ Bot is running...');

    // Enable graceful stop
    process.once('SIGINT', () => {
      bot.stop('SIGINT');
      console.log('Bot stopped due to SIGINT');
    });
    process.once('SIGTERM', () => {
      bot.stop('SIGTERM');
      console.log('Bot stopped due to SIGTERM');
    });
  } catch (error) {
    console.error('Failed to start bot:', error);
    // Provide more detailed error information
    if (error instanceof Error && error.message && error.message.includes('409: Conflict')) {
      console.error('ERROR: Another bot instance is already running!');
      console.error('Please run the stop-bots.ps1 script to kill all running instances before starting again.');
    }
    process.exit(1);
  }
};

// Run the bot
startBot();
